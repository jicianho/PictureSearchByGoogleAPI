/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * Modify at your own risk.
 */

package com.google.vision.v1alpha1.model;

/**
 * Image context.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Vision API. For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageContext extends com.google.api.client.json.GenericJson {

  /**
   * List of languages to use for TEXT_DETECTION. In most cases, an empty value will yield the best
   * results as it will allow text detection to automatically detect the text language. For
   * languages based on the latin alphabet a hint is not needed. In rare cases, when the language of
   * the text in the image is known in advance, setting this hint will help get better results
   * (although it will hurt a great deal if the hint is wrong). Text detection will return an error
   * if one or more of the languages specified here are not supported. The exact list of supported
   * languages are specified here: https://cloud.google.com/translate/v2/using_rest#language-params
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> languageHint;

  /**
   * Lat/long rectangle that specifies the location of the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatLongRect latLongRect;

  /**
   * List of languages to use for TEXT_DETECTION. In most cases, an empty value will yield the best
   * results as it will allow text detection to automatically detect the text language. For
   * languages based on the latin alphabet a hint is not needed. In rare cases, when the language of
   * the text in the image is known in advance, setting this hint will help get better results
   * (although it will hurt a great deal if the hint is wrong). Text detection will return an error
   * if one or more of the languages specified here are not supported. The exact list of supported
   * languages are specified here: https://cloud.google.com/translate/v2/using_rest#language-params
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLanguageHint() {
    return languageHint;
  }

  /**
   * List of languages to use for TEXT_DETECTION. In most cases, an empty value will yield the best
   * results as it will allow text detection to automatically detect the text language. For
   * languages based on the latin alphabet a hint is not needed. In rare cases, when the language of
   * the text in the image is known in advance, setting this hint will help get better results
   * (although it will hurt a great deal if the hint is wrong). Text detection will return an error
   * if one or more of the languages specified here are not supported. The exact list of supported
   * languages are specified here: https://cloud.google.com/translate/v2/using_rest#language-params
   * @param languageHint languageHint or {@code null} for none
   */
  public ImageContext setLanguageHint(java.util.List<java.lang.String> languageHint) {
    this.languageHint = languageHint;
    return this;
  }

  /**
   * Lat/long rectangle that specifies the location of the image.
   * @return value or {@code null} for none
   */
  public LatLongRect getLatLongRect() {
    return latLongRect;
  }

  /**
   * Lat/long rectangle that specifies the location of the image.
   * @param latLongRect latLongRect or {@code null} for none
   */
  public ImageContext setLatLongRect(LatLongRect latLongRect) {
    this.latLongRect = latLongRect;
    return this;
  }

  @Override
  public ImageContext set(String fieldName, Object value) {
    return (ImageContext) super.set(fieldName, value);
  }

  @Override
  public ImageContext clone() {
    return (ImageContext) super.clone();
  }

}
