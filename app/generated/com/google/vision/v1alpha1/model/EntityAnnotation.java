/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * Modify at your own risk.
 */

package com.google.vision.v1alpha1.model;

/**
 * Set of detected entity features.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Vision API. For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EntityAnnotation extends com.google.api.client.json.GenericJson {

  /**
   * Image region to which this entity belongs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BoundingPoly boundingPoly;

  /**
   * The accuracy of the entity recognition in an image. For example, for an image containing
   * 'Eiffel Tower,' this field represents the confidence that there is a tower in the query image.
   * Range [0, 1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float confidence;

  /**
   * Entity textual description, expressed in its locale language.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The language code for the locale in which the entity textual description (next field) is
   * expressed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String locale;

  /**
   * The location information for the recognized entity. Multiple LocationInfo elements can be
   * present since one location may indicate the location of the scene in the query image, and
   * another the location of the place where the query image was taken. Location information is
   * usually present for landmarks.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<LocationInfo> locations;

  /**
   * Knowledge Graph entity ID. Maps to a freebase entity ID. (for example, "Google" maps to: mid
   * /m/045c7b).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mid;

  /**
   * Some entities can have additional optional Property fields. For example a different kind of
   * score or string that qualifies the entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Property> properties;

  /**
   * Overall score of the result. Range [0, 1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float score;

  /**
   * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the
   * relevancy of 'tower' to an image containing 'Eiffel Tower' is likely higher than an image
   * containing a distant towering building, though the confidence that there is a tower may be the
   * same. Range [0, 1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float topicality;

  /**
   * Image region to which this entity belongs.
   * @return value or {@code null} for none
   */
  public BoundingPoly getBoundingPoly() {
    return boundingPoly;
  }

  /**
   * Image region to which this entity belongs.
   * @param boundingPoly boundingPoly or {@code null} for none
   */
  public EntityAnnotation setBoundingPoly(BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
    return this;
  }

  /**
   * The accuracy of the entity recognition in an image. For example, for an image containing
   * 'Eiffel Tower,' this field represents the confidence that there is a tower in the query image.
   * Range [0, 1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getConfidence() {
    return confidence;
  }

  /**
   * The accuracy of the entity recognition in an image. For example, for an image containing
   * 'Eiffel Tower,' this field represents the confidence that there is a tower in the query image.
   * Range [0, 1].
   * @param confidence confidence or {@code null} for none
   */
  public EntityAnnotation setConfidence(java.lang.Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Entity textual description, expressed in its locale language.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Entity textual description, expressed in its locale language.
   * @param description description or {@code null} for none
   */
  public EntityAnnotation setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The language code for the locale in which the entity textual description (next field) is
   * expressed.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocale() {
    return locale;
  }

  /**
   * The language code for the locale in which the entity textual description (next field) is
   * expressed.
   * @param locale locale or {@code null} for none
   */
  public EntityAnnotation setLocale(java.lang.String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The location information for the recognized entity. Multiple LocationInfo elements can be
   * present since one location may indicate the location of the scene in the query image, and
   * another the location of the place where the query image was taken. Location information is
   * usually present for landmarks.
   * @return value or {@code null} for none
   */
  public java.util.List<LocationInfo> getLocations() {
    return locations;
  }

  /**
   * The location information for the recognized entity. Multiple LocationInfo elements can be
   * present since one location may indicate the location of the scene in the query image, and
   * another the location of the place where the query image was taken. Location information is
   * usually present for landmarks.
   * @param locations locations or {@code null} for none
   */
  public EntityAnnotation setLocations(java.util.List<LocationInfo> locations) {
    this.locations = locations;
    return this;
  }

  /**
   * Knowledge Graph entity ID. Maps to a freebase entity ID. (for example, "Google" maps to: mid
   * /m/045c7b).
   * @return value or {@code null} for none
   */
  public java.lang.String getMid() {
    return mid;
  }

  /**
   * Knowledge Graph entity ID. Maps to a freebase entity ID. (for example, "Google" maps to: mid
   * /m/045c7b).
   * @param mid mid or {@code null} for none
   */
  public EntityAnnotation setMid(java.lang.String mid) {
    this.mid = mid;
    return this;
  }

  /**
   * Some entities can have additional optional Property fields. For example a different kind of
   * score or string that qualifies the entity.
   * @return value or {@code null} for none
   */
  public java.util.List<Property> getProperties() {
    return properties;
  }

  /**
   * Some entities can have additional optional Property fields. For example a different kind of
   * score or string that qualifies the entity.
   * @param properties properties or {@code null} for none
   */
  public EntityAnnotation setProperties(java.util.List<Property> properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Overall score of the result. Range [0, 1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * Overall score of the result. Range [0, 1].
   * @param score score or {@code null} for none
   */
  public EntityAnnotation setScore(java.lang.Float score) {
    this.score = score;
    return this;
  }

  /**
   * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the
   * relevancy of 'tower' to an image containing 'Eiffel Tower' is likely higher than an image
   * containing a distant towering building, though the confidence that there is a tower may be the
   * same. Range [0, 1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getTopicality() {
    return topicality;
  }

  /**
   * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the
   * relevancy of 'tower' to an image containing 'Eiffel Tower' is likely higher than an image
   * containing a distant towering building, though the confidence that there is a tower may be the
   * same. Range [0, 1].
   * @param topicality topicality or {@code null} for none
   */
  public EntityAnnotation setTopicality(java.lang.Float topicality) {
    this.topicality = topicality;
    return this;
  }

  @Override
  public EntityAnnotation set(String fieldName, Object value) {
    return (EntityAnnotation) super.set(fieldName, value);
  }

  @Override
  public EntityAnnotation clone() {
    return (EntityAnnotation) super.clone();
  }

}
