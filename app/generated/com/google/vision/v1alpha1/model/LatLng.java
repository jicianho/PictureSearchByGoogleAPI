/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * Modify at your own risk.
 */

package com.google.vision.v1alpha1.model;

/**
 * An object representing a latitude/longitude pair. This is expressed as a pair of doubles
 * representing degrees latitude and degrees longitude. Unless specified otherwise, this must
 * conform to the WGS84 standard. Values must be within normalized ranges.
 *
 * Example of normalization code in Python:
 *
 *     def NormalizeLongitude(longitude):       Wraps decimal degrees longitude to [-180.0, 180.0].
 * q, r = divmod(longitude, 360.0)       if r > 180.0 or (r == 180.0 and q <= -1.0):         return
 * r - 360.0       return r
 *
 *     def NormalizeLatLng(latitude, longitude):       Wraps decimal degrees latitude and longitude
 * to       [-180.0, 180.0] and [-90.0, 90.0], respectively.       r = latitude % 360.0       if r
 * <= 90.0:         return r, NormalizeLongitude(longitude)       elif r >= 270.0:         return r
 * - 360, NormalizeLongitude(longitude)       else:         return 180 - r,
 * NormalizeLongitude(longitude + 180.0)
 *
 *     assert 180.0 == NormalizeLongitude(180.0)     assert -180.0 == NormalizeLongitude(-180.0)
 * assert -179.0 == NormalizeLongitude(181.0)     assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
 * assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)     assert (85.0, 180.0) ==
 * NormalizeLatLng(95.0, 0.0)     assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)     assert
 * (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)     assert (-90.0, -10.0) == NormalizeLatLng(-90.0,
 * -10.0)     assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)     assert (0.0, -170.0) ==
 * NormalizeLatLng(180.0, 10.0)     assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)     assert
 * (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Vision API. For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LatLng extends com.google.api.client.json.GenericJson {

  /**
   * The latitude in degrees. It must be in the range [-90.0, +90.0].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double latitude;

  /**
   * The longitude in degrees. It must be in the range [-180.0, +180.0].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double longitude;

  /**
   * The latitude in degrees. It must be in the range [-90.0, +90.0].
   * @return value or {@code null} for none
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * The latitude in degrees. It must be in the range [-90.0, +90.0].
   * @param latitude latitude or {@code null} for none
   */
  public LatLng setLatitude(java.lang.Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The longitude in degrees. It must be in the range [-180.0, +180.0].
   * @return value or {@code null} for none
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * The longitude in degrees. It must be in the range [-180.0, +180.0].
   * @param longitude longitude or {@code null} for none
   */
  public LatLng setLongitude(java.lang.Double longitude) {
    this.longitude = longitude;
    return this;
  }

  @Override
  public LatLng set(String fieldName, Object value) {
    return (LatLng) super.set(fieldName, value);
  }

  @Override
  public LatLng clone() {
    return (LatLng) super.clone();
  }

}
